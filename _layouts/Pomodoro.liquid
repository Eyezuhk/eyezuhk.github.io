---
layout: default
---

<style>
    body {
        max-width: none; /* Remove o limite de largura 100%*/
        margin: 0; /* Remove margens padrão */
        padding: 0; /* Remove preenchimento padrão */
    }
    .full-width {
        max-width: none !important; /* Ignora a largura máxima */
    }
    .editor-preview {
        display: flex;
        flex-direction: row;
        height: calc(100vh - 0px); /* Ajusta a altura para ocupar a tela */
        width: 100%; /* Garante que a área de edição use 100% da largura */
    }
    
    #livePreview {
        width: 100%; /* Mantém a divisão em 100% para a visualização */
        padding: 0px; /* Removo o padding */
        overflow-y: auto;
        /*background-color: #828282; /* Fundo escuro para a visualização */
        /*color: #fff;  Texto branco para o modo escuro */
    }
    iframe {
        width: 100%;
        height: 100%;
        border: none;
    }
    .container {
        max-width: none;
    }
    body {
        max-width: 100%;
    }

</style>
<div class="editor-preview">
    <div id="livePreview">
        <iframe id="liveFrame"></iframe>
    </div>
</div>

<script>
    const liveFrame = document.getElementById('liveFrame');

const pomodoroAppBase64 = "PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQoNCjxoZWFkPg0KICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04Ij4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+DQogICAgPHRpdGxlPkZuIFBvbW9kb3JvIFRpbWVyPC90aXRsZT4NCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2ZvbnQtYXdlc29tZS82LjAuMC9jc3MvYWxsLm1pbi5jc3MiPg0KICAgIDxzdHlsZT4NCiAgICAgICAgOnJvb3Qgew0KICAgICAgICAgICAgLS1wcmltYXJ5LWNvbG9yOiAjZmY2YjZiOw0KICAgICAgICAgICAgLS1zaG9ydGJyZWFrLWNvbG9yOiAjNGRhYmY3Ow0KICAgICAgICAgICAgLS1sb25nYnJlYWstY29sb3I6ICM0MGMwNTc7DQogICAgICAgICAgICAtLWJnLWNvbG9yOiAjZmZmZmZmOw0KICAgICAgICAgICAgLS10ZXh0LWNvbG9yOiAjMzMzMzMzOw0KICAgICAgICAgICAgLS1vdmVybGF5LWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOCk7DQogICAgICAgICAgICAtLWJ1dHRvbi13aWR0aDogMTIwcHg7DQogICAgICAgICAgICAtLWJ1dHRvbi1oZWlnaHQ6IDQwcHg7DQogICAgICAgICAgICAtLWZvbnQtZmFtaWx5OiBzeXN0ZW0tdWksIC1hcHBsZS1zeXN0ZW0sIHNhbnMtc2VyaWY7DQogICAgICAgICAgICAtLWJvcmRlci1yYWRpdXM6IDEycHg7DQogICAgICAgICAgICAtLXRyYW5zaXRpb24tc3BlZWQ6IDAuM3M7DQogICAgICAgIH0NCg0KICAgICAgICAuZGFyay1tb2RlIHsNCiAgICAgICAgICAgIC0tYmctY29sb3I6ICMxYTFhMWE7DQogICAgICAgICAgICAtLXRleHQtY29sb3I6ICNmZmZmZmY7DQogICAgICAgICAgICAtLW92ZXJsYXktY29sb3I6IHJnYmEoMCwgMCwgMCwgMC42KTsNCiAgICAgICAgfQ0KDQogICAgICAgICogew0KICAgICAgICAgICAgbWFyZ2luOiAwOw0KICAgICAgICAgICAgcGFkZGluZzogMDsNCiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7DQogICAgICAgIH0NCg0KICAgICAgICBib2R5IHsNCiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiB2YXIoLS1mb250LWZhbWlseSk7DQogICAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1jb2xvcik7DQogICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgdmFyKC0tdHJhbnNpdGlvbi1zcGVlZCkgZWFzZTsNCiAgICAgICAgICAgIG1pbi1oZWlnaHQ6IDEwMHZoOw0KICAgICAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjsNCiAgICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjsNCiAgICAgICAgICAgIGJhY2tncm91bmQtYXR0YWNobWVudDogZml4ZWQ7DQogICAgICAgICAgICBsaW5lLWhlaWdodDogMS41Ow0KICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmctY29sb3IpOw0KICAgICAgICB9DQoNCiAgICAgICAgLmNvbnRhaW5lciB7DQogICAgICAgICAgICBtYXgtd2lkdGg6IDkwMHB4Ow0KICAgICAgICAgICAgbWFyZ2luOiAwIGF1dG87DQogICAgICAgICAgICBwYWRkaW5nOiAycmVtOw0KICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tb3ZlcmxheS1jb2xvcik7DQogICAgICAgICAgICBtaW4taGVpZ2h0OiAxMDB2aDsNCiAgICAgICAgICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cigxMHB4KTsNCiAgICAgICAgfQ0KDQogICAgICAgIC50aW1lci1jb250YWluZXIgew0KICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgICAgICAgICAgcGFkZGluZzogMnJlbTsNCiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMpOw0KICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA1KTsNCiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDJyZW07DQogICAgICAgICAgICBib3gtc2hhZG93OiAwIDRweCA2cHggLTFweCByZ2JhKDAsIDAsIDAsIDAuMSk7DQogICAgICAgIH0NCg0KICAgICAgICAudGltZXItZGlzcGxheSB7DQogICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgICAgICAgICB3aWR0aDogMzAwcHg7DQogICAgICAgICAgICBoZWlnaHQ6IDMwMHB4Ow0KICAgICAgICAgICAgbWFyZ2luOiAycmVtIGF1dG87DQogICAgICAgIH0NCg0KICAgICAgICAucHJvZ3Jlc3MtcmluZyB7DQogICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgICAgICAgICB0b3A6IDA7DQogICAgICAgICAgICBsZWZ0OiAwOw0KICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoLTkwZGVnKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC5wcm9ncmVzcy1yaW5nX19jaXJjbGUgew0KICAgICAgICAgICAgdHJhbnNpdGlvbjogc3Ryb2tlLWRhc2hvZmZzZXQgdmFyKC0tdHJhbnNpdGlvbi1zcGVlZCk7DQogICAgICAgICAgICBzdHJva2UtbGluZWNhcDogcm91bmQ7DQogICAgICAgIH0NCg0KICAgICAgICAucHJvZ3Jlc3MtcmluZ19fY2lyY2xlLWJnIHsNCiAgICAgICAgICAgIG9wYWNpdHk6IDAuMjsNCiAgICAgICAgfQ0KDQogICAgICAgIC50aW1lIHsNCiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICAgICAgICAgIHRvcDogNTAlOw0KICAgICAgICAgICAgbGVmdDogNTAlOw0KICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7DQogICAgICAgICAgICBmb250LXNpemU6IDRyZW07DQogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsNCiAgICAgICAgICAgIGZvbnQtdmFyaWFudC1udW1lcmljOiB0YWJ1bGFyLW51bXM7DQogICAgICAgICAgICBkaXNwbGF5OiBmbGV4Ow0KICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsNCiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAgICAgIH0NCg0KICAgICAgICAucG9tby1jb3VudGVyIHsNCiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4xcmVtOw0KICAgICAgICAgICAgbWFyZ2luLXRvcDogMC41cmVtOw0KICAgICAgICAgICAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpOw0KDQogICAgICAgIH0NCg0KICAgICAgICAubW9kZS1idXR0b25zIHsNCiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7DQogICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICAgICAgICAgIGdhcDogMXJlbTsNCiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEuNXJlbTsNCiAgICAgICAgfQ0KDQogICAgICAgIGJ1dHRvbiB7DQogICAgICAgICAgICB3aWR0aDogdmFyKC0tYnV0dG9uLXdpZHRoKTsNCiAgICAgICAgICAgIGhlaWdodDogdmFyKC0tYnV0dG9uLWhlaWdodCk7DQogICAgICAgICAgICBib3JkZXI6IG5vbmU7DQogICAgICAgICAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1ib3JkZXItcmFkaXVzKTsNCiAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTsNCiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsNCiAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCB2YXIoLS10cmFuc2l0aW9uLXNwZWVkKTsNCiAgICAgICAgICAgIGZvbnQtc2l6ZTogMC44NzVyZW07DQogICAgICAgICAgICBkaXNwbGF5OiBmbGV4Ow0KICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KICAgICAgICAgICAgZ2FwOiAwLjVyZW07DQogICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTsNCiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7DQogICAgICAgICAgICBwYWRkaW5nOiAwIDFyZW07DQogICAgICAgIH0NCg0KICAgICAgICBidXR0b24ucG9tb2Rvcm8gew0KICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7DQogICAgICAgIH0NCg0KICAgICAgICBidXR0b24uc2hvcnRCcmVhayB7DQogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zaG9ydGJyZWFrLWNvbG9yKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGJ1dHRvbi5sb25nQnJlYWsgew0KICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbG9uZ2JyZWFrLWNvbG9yKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGJ1dHRvbjpob3ZlciB7DQogICAgICAgICAgICBvcGFjaXR5OiAwLjk7DQogICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTFweCk7DQogICAgICAgIH0NCg0KICAgICAgICBidXR0b246YWN0aXZlIHsNCiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC5jb250cm9scyB7DQogICAgICAgICAgICBkaXNwbGF5OiBmbGV4Ow0KICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgICAgICAgICBnYXA6IDFyZW07DQogICAgICAgICAgICBtYXJnaW46IDJyZW0gMDsNCiAgICAgICAgICAgIGZsZXgtd3JhcDogd3JhcDsNCiAgICAgICAgfQ0KDQogICAgICAgIC5wYW5lbCB7DQogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDUpOw0KICAgICAgICAgICAgcGFkZGluZzogMS41cmVtOw0KICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7DQogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAycmVtOw0KICAgICAgICAgICAgYm94LXNoYWRvdzogMCA0cHggNnB4IC0xcHggcmdiYSgwLCAwLCAwLCAwLjEpOw0KICAgICAgICB9DQoNCiAgICAgICAgLnN0YXRzLWdyaWQgew0KICAgICAgICAgICAgZGlzcGxheTogZ3JpZDsNCiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZml0LCBtaW5tYXgoMjAwcHgsIDFmcikpOw0KICAgICAgICAgICAgZ2FwOiAxLjVyZW07DQogICAgICAgICAgICBtYXJnaW4tdG9wOiAxcmVtOw0KICAgICAgICB9DQoNCiAgICAgICAgLnN0YXQtY2FyZCB7DQogICAgICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDUpOw0KICAgICAgICAgICAgcGFkZGluZzogMS41cmVtOw0KICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7DQogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgICAgICAgICBib3gtc2hhZG93OiAwIDJweCA0cHggcmdiYSgwLCAwLCAwLCAwLjA1KTsNCiAgICAgICAgfQ0KDQogICAgICAgIC5zdGF0LXZhbHVlIHsNCiAgICAgICAgICAgIGZvbnQtc2l6ZTogMnJlbTsNCiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOw0KICAgICAgICAgICAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpOw0KICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMC41cmVtOw0KICAgICAgICB9DQoNCiAgICAgICAgLnNldHRpbmdzLWdyb3VwIHsNCiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDJyZW07DQogICAgICAgIH0NCg0KICAgICAgICAuc2V0dGluZ3MtZ3JvdXAgaDMgew0KICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTsNCiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTsNCiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4yNXJlbTsNCiAgICAgICAgfQ0KDQogICAgICAgIC5zZXR0aW5nLWlucHV0LWdyb3VwIHsNCiAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7DQogICAgICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gMWZyIGF1dG87DQogICAgICAgICAgICBnYXA6IDFyZW07DQogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtOw0KICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgICAgICAgfQ0KDQogICAgICAgIC5zZXR0aW5nLWlucHV0LWdyb3VwIGxhYmVsIHsNCiAgICAgICAgICAgIGdyaWQtY29sdW1uOiAxOw0KICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsNCiAgICAgICAgfQ0KDQogICAgICAgIC5zZXR0aW5nLWlucHV0LWdyb3VwPio6bnRoLWNoaWxkKDIpIHsNCiAgICAgICAgICAgIGdyaWQtY29sdW1uOiAyOw0KICAgICAgICB9DQoNCiAgICAgICAgLnNldHRpbmctaW5wdXQtZ3JvdXA+KjpudGgtY2hpbGQoMykgew0KICAgICAgICAgICAgZ3JpZC1jb2x1bW46IDM7DQogICAgICAgICAgICBqdXN0aWZ5LXNlbGY6IHN0YXJ0Ow0KICAgICAgICB9DQoNCiAgICAgICAgaW5wdXRbdHlwZT0ibnVtYmVyIl0sDQogICAgICAgIGlucHV0W3R5cGU9InRleHQiXSwNCiAgICAgICAgc2VsZWN0IHsNCiAgICAgICAgICAgIHBhZGRpbmc6IDAuNXJlbSAxcmVtOw0KICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7DQogICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDE1NiwgMTYzLCAxNzUsIDAuMik7DQogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDUpOw0KICAgICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtY29sb3IpOw0KICAgICAgICAgICAgd2lkdGg6IDEwMCU7DQogICAgICAgICAgICB0cmFuc2l0aW9uOiBib3JkZXItY29sb3IgdmFyKC0tdHJhbnNpdGlvbi1zcGVlZCk7DQogICAgICAgIH0NCg0KICAgICAgICBpbnB1dFt0eXBlPSJudW1iZXIiXTpmb2N1cywNCiAgICAgICAgaW5wdXRbdHlwZT0idGV4dCJdOmZvY3VzLA0KICAgICAgICBzZWxlY3Q6Zm9jdXMgew0KICAgICAgICAgICAgb3V0bGluZTogbm9uZTsNCiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7DQogICAgICAgIH0NCg0KICAgICAgICAudGFzay1pbnB1dC1jb250YWluZXIgew0KICAgICAgICAgICAgZGlzcGxheTogZmxleDsNCiAgICAgICAgICAgIGdhcDogMXJlbTsNCiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEuNXJlbTsNCiAgICAgICAgfQ0KDQogICAgICAgIC50YXNrLWl0ZW0gew0KICAgICAgICAgICAgZGlzcGxheTogZmxleDsNCiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsNCiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAgICAgICAgICBwYWRkaW5nOiAxcmVtOw0KICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7DQogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDUpOw0KICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMC41cmVtOw0KICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIHZhcigtLXRyYW5zaXRpb24tc3BlZWQpOw0KICAgICAgICB9DQoNCiAgICAgICAgLnRhc2staXRlbTpob3ZlciB7DQogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSk7DQogICAgICAgIH0NCg0KICAgICAgICAudGFzay1pdGVtLmNvbXBsZXRlZCB7DQogICAgICAgICAgICBvcGFjaXR5OiAwLjc7DQogICAgICAgIH0NCg0KICAgICAgICAudGFzay1pdGVtLmNvbXBsZXRlZCBzcGFuIHsNCiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoOw0KICAgICAgICB9DQoNCiAgICAgICAgLm5vdGlmaWNhdGlvbiB7DQogICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7DQogICAgICAgICAgICB0b3A6IDIwcHg7DQogICAgICAgICAgICByaWdodDogMjBweDsNCiAgICAgICAgICAgIHBhZGRpbmc6IDFyZW0gMS41cmVtOw0KICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7DQogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTsNCiAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTsNCiAgICAgICAgICAgIG9wYWNpdHk6IDA7DQogICAgICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IHZhcigtLXRyYW5zaXRpb24tc3BlZWQpOw0KICAgICAgICAgICAgei1pbmRleDogMTAwMDsNCiAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgNHB4IDZweCAtMXB4IHJnYmEoMCwgMCwgMCwgMC4xKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC5ub3RpZmljYXRpb24uc2hvdyB7DQogICAgICAgICAgICBvcGFjaXR5OiAxOw0KICAgICAgICB9DQoNCiAgICAgICAgLmtleWJvYXJkLXNob3J0Y3V0cyB7DQogICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7DQogICAgICAgICAgICBib3R0b206IDIwcHg7DQogICAgICAgICAgICByaWdodDogMjBweDsNCiAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLW92ZXJsYXktY29sb3IpOw0KICAgICAgICAgICAgcGFkZGluZzogMXJlbSAxLjVyZW07DQogICAgICAgICAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1ib3JkZXItcmFkaXVzKTsNCiAgICAgICAgICAgIGZvbnQtc2l6ZTogMC44NzVyZW07DQogICAgICAgICAgICB6LWluZGV4OiAxMDAwOw0KICAgICAgICAgICAgYm94LXNoYWRvdzogMCA0cHggNnB4IC0xcHggcmdiYSgwLCAwLCAwLCAwLjEpOw0KICAgICAgICB9DQoNCiAgICAgICAgLnRoZW1lLXRvZ2dsZSB7DQogICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7DQogICAgICAgICAgICB0b3A6IDByZW07DQogICAgICAgICAgICByaWdodDogMHJlbTsNCiAgICAgICAgICAgIHotaW5kZXg6IDEwMDA7DQogICAgICAgICAgICB3aWR0aDogNDBweDsNCiAgICAgICAgICAgIGhlaWdodDogNDBweDsNCiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTsNCiAgICAgICAgICAgIHBhZGRpbmc6IDA7DQogICAgICAgICAgICBtYXJnaW46IDByZW07DQogICAgICAgICAgICBiYWNrZ3JvdW5kOiAjZmY2YjZiOw0KICAgICAgICAgICAgZGlzcGxheTogZmxleDsNCiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsNCiAgICAgICAgICAgIGNvbG9yOiAjZmZmZmZmOw0KICAgICAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciB2YXIoLS10cmFuc2l0aW9uLXNwZWVkKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC50aGVtZS10b2dnbGU6aG92ZXIgew0KICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpOw0KICAgICAgICB9DQoNCiAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7DQogICAgICAgICAgICAuY29udGFpbmVyIHsNCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAxcmVtOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAudGltZXItZGlzcGxheSB7DQogICAgICAgICAgICAgICAgd2lkdGg6IDMwMHB4Ow0KICAgICAgICAgICAgICAgIGhlaWdodDogMzAwcHg7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC50aW1lIHsNCiAgICAgICAgICAgICAgICBmb250LXNpemU6IDNyZW07DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5rZXlib2FyZC1zaG9ydGN1dHMgew0KICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5zdGF0cy1ncmlkIHsNCiAgICAgICAgICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLnNldHRpbmctaW5wdXQtZ3JvdXAgew0KICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQogICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlucHV0W3R5cGU9Im51bWJlciJdLA0KICAgICAgICAgICAgaW5wdXRbdHlwZT0idGV4dCJdLA0KICAgICAgICAgICAgc2VsZWN0IHsNCiAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDEwMCU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAudGFzay1hY3Rpb25zIHsNCiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7DQogICAgICAgICAgICBnYXA6IDAuNXJlbTsNCiAgICAgICAgfQ0KDQogICAgICAgIC50YXNrLWFjdGlvbnMgYnV0dG9uIHsNCiAgICAgICAgICAgIHdpZHRoOiBhdXRvOw0KICAgICAgICAgICAgaGVpZ2h0OiBhdXRvOw0KICAgICAgICAgICAgcGFkZGluZzogMC41cmVtOw0KICAgICAgICB9DQoNCiAgICAgICAgLnBvbW9kb3JvLWNvdW50IHsNCiAgICAgICAgICAgIGZvbnQtc2l6ZTogMC44NzVyZW07DQogICAgICAgICAgICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7DQogICAgICAgIH0NCg0KICAgICAgICAudGFzay1zZWxlY3Rpb24tY29udGFpbmVyIHsNCiAgICAgICAgICAgIG1hcmdpbjogMS41cmVtIDA7DQogICAgICAgIH0NCg0KICAgICAgICBzZWxlY3QjdGFza1NlbGVjdCB7DQogICAgICAgICAgICBtYXJnaW46IDAgYXV0bzsNCiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrOw0KICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmctY29sb3IpOw0KICAgICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtY29sb3IpOw0KICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgxNTYsIDE2MywgMTc1LCAwLjIpOw0KICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7DQogICAgICAgICAgICBwYWRkaW5nOiAwLjVyZW07DQogICAgICAgIH0NCg0KICAgICAgICBzZWxlY3QjdGFza1NlbGVjdCBvcHRpb24gew0KICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmctY29sb3IpOw0KICAgICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtY29sb3IpOw0KICAgICAgICB9DQoNCiAgICAgICAgLnlvdXR1YmUtY29udGFpbmVyIHsNCiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICAgICAgICAgIHdpZHRoOiAxMDAlOw0KICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDU2LjI1JTsNCiAgICAgICAgICAgIG1hcmdpbi10b3A6IDJyZW07DQogICAgICAgIH0NCg0KICAgICAgICAueW91dHViZS1jb250YWluZXIgaWZyYW1lIHsNCiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICAgICAgICAgIHRvcDogMDsNCiAgICAgICAgICAgIGxlZnQ6IDA7DQogICAgICAgICAgICB3aWR0aDogMTAwJTsNCiAgICAgICAgICAgIGhlaWdodDogMTAwJTsNCiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7DQogICAgICAgIH0NCg0KICAgICAgICAuaGlkZSB7DQogICAgICAgICAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7DQogICAgICAgIH0NCg0KICAgICAgICAuYWN0aXZlIHsNCiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMS4wNSk7DQogICAgICAgICAgICBib3gtc2hhZG93OiAwIDRweCAxMnB4IHJnYmEoMCwgMCwgMCwgMC4xKTsNCiAgICAgICAgfQ0KICAgICAgICAvKiBFc3RpbG9zIHNpbXBsaWZpY2Fkb3MgcGFyYSBzZWxlY3RzIGRlIMOhdWRpbyAobm90aWZpY2HDp8O1ZXMpICovDQogICAgICAgIC5zZXR0aW5nLWlucHV0LWdyb3VwIHNlbGVjdCB7DQogICAgICAgICAgICBwYWRkaW5nOiAwLjVyZW0gMXJlbTsNCiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMpOw0KICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgxNTYsIDE2MywgMTc1LCAwLjIpOw0KICAgICAgICAgICAgd2lkdGg6IDEwMCU7DQogICAgICAgICAgICB0cmFuc2l0aW9uOiBib3JkZXItY29sb3IgdmFyKC0tdHJhbnNpdGlvbi1zcGVlZCk7DQogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iZy1jb2xvcik7DQogICAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1jb2xvcik7DQogICAgICAgIH0NCg0KICAgICAgICAuc2V0dGluZy1pbnB1dC1ncm91cCBzZWxlY3Q6Zm9jdXMgew0KICAgICAgICAgICAgb3V0bGluZTogbm9uZTsNCiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7DQogICAgICAgIH0NCg0KICAgICAgICAuc2V0dGluZy1pbnB1dC1ncm91cCBzZWxlY3Qgb3B0aW9uIHsNCiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJnLWNvbG9yKTsNCiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yKTsNCiAgICAgICAgfQ0KICAgIDwvc3R5bGU+DQo8L2hlYWQ+DQoNCjxib2R5Pg0KICAgIDxidXR0b24gY2xhc3M9InRoZW1lLXRvZ2dsZSIgb25jbGljaz0idG9nZ2xlVGhlbWUoKSIgdGl0bGU9IlRvZ2dsZSB0aGVtZSI+DQogICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtbW9vbiI+PC9pPg0KICAgIDwvYnV0dG9uPg0KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgIDxkaXYgY2xhc3M9InRpbWVyLWNvbnRhaW5lciI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RlLWJ1dHRvbnMiPg0KICAgICAgICAgICAgICAgIDxidXR0b24gb25jbGljaz0ic2V0TW9kZSgncG9tb2Rvcm8nKSIgZGF0YS1tb2RlPSJwb21vZG9ybyIgY2xhc3M9InBvbW9kb3JvIGFjdGl2ZSINCiAgICAgICAgICAgICAgICAgICAgdGl0bGU9IlN0YXJ0IFBvbW9kb3JvIj4NCiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1jbG9jayI+PC9pPiBQb21vZG9ybw0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgIDxidXR0b24gb25jbGljaz0ic2V0TW9kZSgnc2hvcnRCcmVhaycpIiBkYXRhLW1vZGU9InNob3J0QnJlYWsiIGNsYXNzPSJzaG9ydEJyZWFrIg0KICAgICAgICAgICAgICAgICAgICB0aXRsZT0iU3RhcnQgc2hvcnQgYnJlYWsiPg0KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWNvZmZlZSI+PC9pPiBTaG9ydCBCcmVhaw0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgIDxidXR0b24gb25jbGljaz0ic2V0TW9kZSgnbG9uZ0JyZWFrJykiIGRhdGEtbW9kZT0ibG9uZ0JyZWFrIiBjbGFzcz0ibG9uZ0JyZWFrIg0KICAgICAgICAgICAgICAgICAgICB0aXRsZT0iU3RhcnQgbG9uZyBicmVhayI+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtY291Y2giPjwvaT4gTG9uZyBCcmVhaw0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhc2stc2VsZWN0aW9uLWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0idGFza1NlbGVjdCIgYXJpYS1sYWJlbD0iU2VsZWN0IGN1cnJlbnQgdGFzayI+DQogICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IiI+U2VsZWN0IGEgdGFzazwvb3B0aW9uPg0KICAgICAgICAgICAgICAgIDwvc2VsZWN0Pg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRpbWVyLWRpc3BsYXkiIHJvbGU9InRpbWVyIj4NCiAgICAgICAgICAgICAgICA8c3ZnIGNsYXNzPSJwcm9ncmVzcy1yaW5nIiB3aWR0aD0iMzAwIiBoZWlnaHQ9IjMwMCI+DQogICAgICAgICAgICAgICAgICAgIDxjaXJjbGUgY2xhc3M9InByb2dyZXNzLXJpbmdfX2NpcmNsZS1iZyIgc3Ryb2tlPSJjdXJyZW50Q29sb3IiIHN0cm9rZS13aWR0aD0iOCIgZmlsbD0idHJhbnNwYXJlbnQiDQogICAgICAgICAgICAgICAgICAgICAgICByPSIxNDAiIGN4PSIxNTAiIGN5PSIxNTAiIC8+DQogICAgICAgICAgICAgICAgICAgIDxjaXJjbGUgY2xhc3M9InByb2dyZXNzLXJpbmdfX2NpcmNsZSIgc3Ryb2tlPSJjdXJyZW50Q29sb3IiIHN0cm9rZS13aWR0aD0iOCIgZmlsbD0idHJhbnNwYXJlbnQiDQogICAgICAgICAgICAgICAgICAgICAgICByPSIxNDAiIGN4PSIxNTAiIGN5PSIxNTAiIC8+DQogICAgICAgICAgICAgICAgPC9zdmc+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGltZSIgaWQ9InRpbWUiIGFyaWEtbGl2ZT0icG9saXRlIj4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4+MjU6MDA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBvbW8tY291bnRlciIgaWQ9InRvdGFsUG9tb2Rvcm9zIj4wPC9zcGFuPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRyb2xzIj4NCiAgICAgICAgICAgICAgICA8YnV0dG9uIG9uY2xpY2s9InN0YXJ0VGltZXIoKSIgaWQ9InN0YXJ0QnRuIiBjbGFzcz0icG9tb2Rvcm8iIHRpdGxlPSJTdGFydC9QYXVzZSB0aW1lciI+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtcGxheSI+PC9pPiBTdGFydA0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgIDxidXR0b24gb25jbGljaz0icmVzZXRUaW1lcigpIiBjbGFzcz0icG9tb2Rvcm8iIHRpdGxlPSJSZXNldCB0aW1lciI+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtcmVkbyI+PC9pPiBSZXNldA0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgIDxidXR0b24gb25jbGljaz0idG9nZ2xlU2V0dGluZ3MoKSIgY2xhc3M9InBvbW9kb3JvIiB0aXRsZT0iVG9nZ2xlIHNldHRpbmdzIHBhbmVsIj4NCiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1jb2ciPjwvaT4gU2V0dGluZ3MNCiAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCIgaWQ9InRhc2tMaXN0UGFuZWwiPg0KICAgICAgICAgICAgPGgzPlRhc2tzPC9oMz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhc2staW5wdXQtY29udGFpbmVyIj4NCiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9InRhc2tJbnB1dCIgcGxhY2Vob2xkZXI9IkFkZCBhIG5ldyB0YXNrIiBvbmtleWRvd249ImhhbmRsZVRhc2tJbnB1dChldmVudCkiPg0KICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBvbW9kb3JvIiBvbmNsaWNrPSJhZGRUYXNrKCkiPkFkZCBUYXNrPC9idXR0b24+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgaWQ9InRhc2tMaXN0Ij48L2Rpdj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwiIGlkPSJzdGF0c1BhbmVsIj4NCiAgICAgICAgICAgIDxoMz5TdGF0aXN0aWNzPC9oMz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YXRzLWdyaWQiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YXQtY2FyZCI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YXQtdmFsdWUiIGlkPSJ0b3RhbFBvbW9kb3Jvc1N0YXQiPjA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdj5Ub3RhbCBQb21vZG9yb3M8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0LWNhcmQiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0LXZhbHVlIiBpZD0idG90YWxUaW1lIj4waCAwbTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2PkZvY3VzIFRpbWU8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0LWNhcmQiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0LXZhbHVlIiBpZD0iZGFpbHlTdHJlYWsiPjA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdj5EYWlseSBTdHJlYWs8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCIgaWQ9InNldHRpbmdzUGFuZWwiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZXR0aW5ncy1ncm91cCI+DQogICAgICAgICAgICAgICAgPGgzPllvdVR1YmUgTXVzaWM8L2gzPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNldHRpbmctaW5wdXQtZ3JvdXAiPg0KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJ5b3V0dWJlVXJsIj5Zb3VUdWJlIFZpZGVvIFVSTDwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0ieW91dHViZVVybCIgcGxhY2Vob2xkZXI9IkVudGVyIFlvdVR1YmUgdmlkZW8gVVJMIg0KICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9amZLZlBmeUpSZGsiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2PjwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZXR0aW5ncy1ncm91cCI+DQogICAgICAgICAgICAgICAgPGgzPlRpbWVyIFNldHRpbmdzPC9oMz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZXR0aW5nLWlucHV0LWdyb3VwIj4NCiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0icG9tb2Rvcm9UaW1lIj5Qb21vZG9ybyAobWludXRlcyk8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ibnVtYmVyIiBpZD0icG9tb2Rvcm9UaW1lIiB2YWx1ZT0iMjUiIG1pbj0iMCIgbWF4PSI2MDAiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2PjwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNldHRpbmctaW5wdXQtZ3JvdXAiPg0KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJzaG9ydEJyZWFrVGltZSI+U2hvcnQgQnJlYWsgKG1pbnV0ZXMpPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9Im51bWJlciIgaWQ9InNob3J0QnJlYWtUaW1lIiB2YWx1ZT0iNSIgbWluPSIwIiBtYXg9IjMwMCI+DQogICAgICAgICAgICAgICAgICAgIDxkaXY+PC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2V0dGluZy1pbnB1dC1ncm91cCI+DQogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImxvbmdCcmVha1RpbWUiPkxvbmcgQnJlYWsgKG1pbnV0ZXMpPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9Im51bWJlciIgaWQ9ImxvbmdCcmVha1RpbWUiIHZhbHVlPSIxNSIgbWluPSIwIiBtYXg9IjYwMCI+DQogICAgICAgICAgICAgICAgICAgIDxkaXY+PC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2V0dGluZy1pbnB1dC1ncm91cCI+DQogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InBvbW9kb3Jvc0JlZm9yZUxvbmdCcmVhayI+UG9tb2Rvcm9zIEJlZm9yZSBMb25nIEJyZWFrPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9Im51bWJlciIgaWQ9InBvbW9kb3Jvc0JlZm9yZUxvbmdCcmVhayIgdmFsdWU9IjQiIG1pbj0iMSIgbWF4PSIxMCI+DQogICAgICAgICAgICAgICAgICAgIDxkaXY+PC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2V0dGluZy1pbnB1dC1ncm91cCIgc3R5bGU9ImRpc3BsYXk6IGZsZXg7IGFsaWduLWl0ZW1zOiBjZW50ZXI7Ij4NCiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iYXV0b1N0YXJ0QnJlYWtzIj5BdXRvIFN0YXJ0IEJyZWFrczwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9ImF1dG9TdGFydEJyZWFrcyIgY2hlY2tlZD4NCiAgICAgICAgICAgICAgICAgICAgPGRpdj48L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZXR0aW5nLWlucHV0LWdyb3VwIiBzdHlsZT0iZGlzcGxheTogZmxleDsgYWxpZ24taXRlbXM6IGNlbnRlcjsiPg0KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJhdXRvU3RhcnRCcmVha3MiPktleWJvYXJkIFNob3J0Y3V0czwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBvbW9kb3JvIiBvbmNsaWNrPSJ0b2dnbGVLZXlib2FyZFNob3J0Y3V0cygpIj5IaWRlL1Nob3c8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdj48L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZXR0aW5ncy1ncm91cCI+DQogICAgICAgICAgICAgICAgPGgzPk5vdGlmaWNhdGlvbiBTb3VuZHM8L2gzPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNldHRpbmctaW5wdXQtZ3JvdXAiPg0KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJwb21vZG9yb1NvdW5kIj5Qb21vZG9ybyBFbmQgU291bmQ8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJwb21vZG9yb1NvdW5kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImJlbGwiPkJlbGw8L29wdGlvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImNoaW1lIj5DaGltZTwvb3B0aW9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iZGluZyI+RGluZzwvb3B0aW9uPg0KICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4NCiAgICAgICAgICAgICAgICAgICAgPGRpdj48L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZXR0aW5nLWlucHV0LWdyb3VwIj4NCiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ic2hvcnRCcmVha1NvdW5kIj5TaG9ydCBCcmVhayBFbmQgU291bmQ8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJzaG9ydEJyZWFrU291bmQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iY2hpbWUiPkNoaW1lPC9vcHRpb24+DQogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJiZWxsIj5CZWxsPC9vcHRpb24+DQogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJkaW5nIj5EaW5nPC9vcHRpb24+DQogICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2PjwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNldHRpbmctaW5wdXQtZ3JvdXAiPg0KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJsb25nQnJlYWtTb3VuZCI+TG9uZyBCcmVhayBFbmQgU291bmQ8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJsb25nQnJlYWtTb3VuZCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJkaW5nIj5EaW5nPC9vcHRpb24+DQogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJiZWxsIj5CZWxsPC9vcHRpb24+DQogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJjaGltZSI+Q2hpbWU8L29wdGlvbj4NCiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+DQogICAgICAgICAgICAgICAgICAgIDxkaXY+PC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2V0dGluZy1pbnB1dC1ncm91cCIgc3R5bGU9ImRpc3BsYXk6IGZsZXg7IGFsaWduLWl0ZW1zOiBjZW50ZXI7Ij4NCiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibXV0ZVNvdW5kcyI+RGlzYWJsZSBTb3VuZHM8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJtdXRlU291bmRzIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdj48L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZXR0aW5ncy1ncm91cCI+DQogICAgICAgICAgICAgICAgPGgzPkJhY2tncm91bmQ8L2gzPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNldHRpbmctaW5wdXQtZ3JvdXAiPg0KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJiZ1VybCI+QmFja2dyb3VuZCBVUkw8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9ImJnVXJsIiBwbGFjZWhvbGRlcj0iRW50ZXIgaW1hZ2UgVVJMIj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icG9tb2Rvcm8iIG9uY2xpY2s9InVwZGF0ZUJhY2tncm91bmQoJ3VybCcpIj5VcGRhdGUgVVJMPC9idXR0b24+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2V0dGluZy1pbnB1dC1ncm91cCI+DQogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImJnRmlsZSI+VXBsb2FkIEltYWdlPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImZpbGUiIGlkPSJiZ0ZpbGUiIGFjY2VwdD0iaW1hZ2UvKiI+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBvbW9kb3JvIiBvbmNsaWNrPSJ1cGRhdGVCYWNrZ3JvdW5kKCdmaWxlJykiPlVwZGF0ZSBGaWxlPC9idXR0b24+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2V0dGluZy1pbnB1dC1ncm91cCI+DQogICAgICAgICAgICAgICAgICAgIDxkaXY+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBvbW9kb3JvIiBvbmNsaWNrPSJyZW1vdmVCYWNrZ3JvdW5kKCkiPlJlbW92ZSBCYWNrZ3JvdW5kPC9idXR0b24+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2V0dGluZ3MtZ3JvdXAiPg0KICAgICAgICAgICAgICAgIDxoMz5SZXNldCBTZXR0aW5nczwvaDM+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2V0dGluZy1pbnB1dC1ncm91cCI+DQogICAgICAgICAgICAgICAgICAgIDxkaXY+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBvbW9kb3JvIiBvbmNsaWNrPSJyZXNldEFsbFNldHRpbmdzKCkiIHRpdGxlPSJSZXNldCBhbGwgc2V0dGluZ3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS11bmRvIj48L2k+IFJlc2V0IEFsbA0KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0ieW91dHViZS1jb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBpZD0ieW91dHViZVBsYXllciI+PC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KDQogICAgPGRpdiBjbGFzcz0ibm90aWZpY2F0aW9uIiBpZD0ibm90aWZpY2F0aW9uIj48L2Rpdj4NCg0KICAgIDxkaXYgY2xhc3M9ImtleWJvYXJkLXNob3J0Y3V0cyIgaWQ9ImtleWJvYXJkU2hvcnRjdXRzIiBvbmNsaWNrPSJ0b2dnbGVLZXlib2FyZFNob3J0Y3V0cygpIj4NCiAgICAgICAgPHN0cm9uZz5LZXlib2FyZCBTaG9ydGN1dHM6PC9zdHJvbmc+DQogICAgICAgIDxkaXY+U3BhY2UgLSBTdGFydC9QYXVzZTwvZGl2Pg0KICAgICAgICA8ZGl2PlIgLSBSZXNldCBUaW1lcjwvZGl2Pg0KICAgICAgICA8ZGl2PjEgLSBQb21vZG9ybzwvZGl2Pg0KICAgICAgICA8ZGl2PjIgLSBTaG9ydCBCcmVhazwvZGl2Pg0KICAgICAgICA8ZGl2PjMgLSBMb25nIEJyZWFrPC9kaXY+DQogICAgICAgIDxkaXY+Q2xpY2sgaGVyZSB0byBoaWRlPC9kaXY+DQogICAgPC9kaXY+DQoNCiAgICA8c2NyaXB0Pg0KICAgICAgICAvLyAtLS0gVXRpbGl0eSBGdW5jdGlvbnMgLS0tDQogICAgICAgIGNvbnN0IGVsID0gaWQgPT4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpOw0KDQogICAgICAgIGNvbnN0IGZvcm1hdFRpbWUgPSBzZWNvbmRzID0+IHsNCiAgICAgICAgICAgIGlmIChzZWNvbmRzIDwgMzYwMCkgeyAvLyBNZW5vcyBkZSAxIGhvcmENCiAgICAgICAgICAgICAgICBjb25zdCBtaW5zID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gNjApOw0KICAgICAgICAgICAgICAgIGNvbnN0IHNlY3MgPSBzZWNvbmRzICUgNjA7DQogICAgICAgICAgICAgICAgLy8gU3Vic3RpdHVpbmRvIHBhZFN0YXJ0IHBvciB1bWEgc29sdcOnw6NvIG1haXMgY29tcGF0w612ZWwNCiAgICAgICAgICAgICAgICByZXR1cm4gKG1pbnMgPCAxMCA/ICcwJyArIG1pbnMgOiBtaW5zKSArICc6JyArIChzZWNzIDwgMTAgPyAnMCcgKyBzZWNzIDogc2Vjcyk7DQogICAgICAgICAgICB9IGVsc2UgeyAvLyBNYWlzIGRlIDEgaG9yYQ0KICAgICAgICAgICAgICAgIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gMzYwMCk7DQogICAgICAgICAgICAgICAgY29uc3QgbWlucyA9IE1hdGguZmxvb3IoKHNlY29uZHMgJSAzNjAwKSAvIDYwKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gaG91cnMgKyAnaCAnICsgbWlucyArICdtJzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfTsNCg0KICAgICAgICAvLyBGdW7Dp8OjbyBwYXJhIGNyaWFyIGJlZXANCiAgICAgICAgZnVuY3Rpb24gY3JlYXRlQmVlcChmcmVxdWVuY3kgPSA0NDAsIGR1cmF0aW9uID0gMjAwLCB2b2x1bWUgPSAwLjEpIHsNCiAgICAgICAgICAgIGNvbnN0IGF1ZGlvQ29udGV4dCA9IG5ldyAod2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0KSgpOw0KICAgICAgICAgICAgY29uc3Qgb3NjaWxsYXRvciA9IGF1ZGlvQ29udGV4dC5jcmVhdGVPc2NpbGxhdG9yKCk7DQogICAgICAgICAgICBjb25zdCBnYWluTm9kZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7DQoNCiAgICAgICAgICAgIG9zY2lsbGF0b3IuY29ubmVjdChnYWluTm9kZSk7DQogICAgICAgICAgICBnYWluTm9kZS5jb25uZWN0KGF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7DQoNCiAgICAgICAgICAgIG9zY2lsbGF0b3IuZnJlcXVlbmN5LnZhbHVlID0gZnJlcXVlbmN5Ow0KICAgICAgICAgICAgZ2Fpbk5vZGUuZ2Fpbi52YWx1ZSA9IHZvbHVtZTsNCg0KICAgICAgICAgICAgb3NjaWxsYXRvci5zdGFydCgpOw0KICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7DQogICAgICAgICAgICAgICAgb3NjaWxsYXRvci5zdG9wKCk7DQogICAgICAgICAgICAgICAgYXVkaW9Db250ZXh0LmNsb3NlKCk7DQogICAgICAgICAgICB9LCBkdXJhdGlvbik7DQogICAgICAgIH0NCiAgICAgICAgY29uc3Qgc2hvd05vdGlmaWNhdGlvbiA9IChtZXNzYWdlKSA9PiB7DQogICAgICAgICAgICBjb25zdCBub3RpZmljYXRpb24gPSBlbCgnbm90aWZpY2F0aW9uJyk7DQogICAgICAgICAgICBub3RpZmljYXRpb24udGV4dENvbnRlbnQgPSBtZXNzYWdlOw0KICAgICAgICAgICAgbm90aWZpY2F0aW9uLmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTsNCiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gbm90aWZpY2F0aW9uLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKSwgMzAwMCk7DQogICAgICAgIH07DQogICAgICAgIGNvbnN0IGVzY2FwZUh0bWwgPSB0ZXh0ID0+IHsNCiAgICAgICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOw0KICAgICAgICAgICAgZGl2LnRleHRDb250ZW50ID0gdGV4dDsNCiAgICAgICAgICAgIHJldHVybiBkaXYuaW5uZXJIVE1MOw0KICAgICAgICB9Ow0KDQogICAgICAgIC8vIC0tLSBDb25zdGFudHMgLS0tDQogICAgICAgIGNvbnN0IERFRkFVTFRfVElNRVMgPSB7IHBvbW9kb3JvOiAyNSAqIDYwLCBzaG9ydEJyZWFrOiA1ICogNjAsIGxvbmdCcmVhazogMTUgKiA2MCB9Ow0KICAgICAgICBjb25zdCBERUZBVUxUX1NPVU5EUyA9IHsgcG9tb2Rvcm86ICdiZWxsJywgc2hvcnRCcmVhazogJ2NoaW1lJywgbG9uZ0JyZWFrOiAnZGluZycgfTsNCiAgICAgICAgY29uc3QgQ0lSQ0xFX1JBRElVUyA9IDE0MDsNCiAgICAgICAgY29uc3QgQ0lSQ0xFX0NJUkNVTUZFUkVOQ0UgPSAyICogTWF0aC5QSSAqIENJUkNMRV9SQURJVVM7DQogICAgICAgIGNvbnN0IERFRkFVTFRfWU9VVFVCRV9VUkwgPSAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1qZktmUGZ5SlJkayI7DQogICAgICAgIGNvbnN0IGNvbG9ycyA9IHsNCiAgICAgICAgICAgIHBvbW9kb3JvOiAnI2ZmNmI2YicsDQogICAgICAgICAgICBzaG9ydEJyZWFrOiAnIzRkYWJmNycsDQogICAgICAgICAgICBsb25nQnJlYWs6ICcjNDBjMDU3Jw0KICAgICAgICB9Ow0KDQogICAgICAgIC8vIC0tLSBTdGF0ZSBWYXJpYWJsZXMgLS0tDQogICAgICAgIGxldCB0aW1lTGVmdDsNCiAgICAgICAgbGV0IHRpbWVySWQ7DQogICAgICAgIGxldCBjdXJyZW50TW9kZSA9ICdwb21vZG9ybyc7DQogICAgICAgIGxldCB0YXNrcyA9IFtdOw0KICAgICAgICBsZXQgc2VsZWN0ZWRUYXNrSW5kZXggPSBudWxsOw0KICAgICAgICBsZXQgYXV0b1N0YXJ0QnJlYWtzID0gdHJ1ZTsNCiAgICAgICAgbGV0IHBvbW9kb3JvQ291bnQgPSAwOw0KICAgICAgICBsZXQgcG9tb2Rvcm9zQmVmb3JlTG9uZ0JyZWFrID0gNDsNCiAgICAgICAgbGV0IG5vdGlmaWNhdGlvblNvdW5kcyA9IHsgLi4uREVGQVVMVF9TT1VORFMgfTsNCiAgICAgICAgbGV0IG11dGVTb3VuZHMgPSBmYWxzZTsNCiAgICAgICAgbGV0IHN0YXRpc3RpY3MgPSB7IHRvdGFsUG9tb2Rvcm9zOiAwLCB0b3RhbEZvY3VzVGltZTogMCwgZGFpbHlTdHJlYWs6IDAsIGxhc3RDb21wbGV0ZWQ6IG51bGwgfTsNCiAgICAgICAgbGV0IHRpbWVzID0geyAuLi5ERUZBVUxUX1RJTUVTIH07DQogICAgICAgIGxldCB5b3V0dWJlUGxheWVyOw0KDQogICAgICAgIC8vIC0tLSBET00gRWxlbWVudHMgLS0tDQogICAgICAgIGNvbnN0IHRpbWVEaXNwbGF5ID0gZWwoJ3RpbWUnKS5xdWVyeVNlbGVjdG9yKCdzcGFuJyk7DQogICAgICAgIGNvbnN0IHBvbW9Db3VudGVyRGlzcGxheSA9IGVsKCd0aW1lJykucXVlcnlTZWxlY3RvcignLnBvbW8tY291bnRlcicpOw0KICAgICAgICBjb25zdCBzdGFydEJ0biA9IGVsKCdzdGFydEJ0bicpOw0KICAgICAgICBjb25zdCBtb2RlQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tb2RlLWJ1dHRvbnMgYnV0dG9uJyk7DQogICAgICAgIGNvbnN0IHByb2dyZXNzQ2lyY2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2dyZXNzLXJpbmdfX2NpcmNsZScpOw0KICAgICAgICBjb25zdCBwcm9ncmVzc0NpcmNsZUJnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2dyZXNzLXJpbmdfX2NpcmNsZS1iZycpOw0KICAgICAgICBjb25zdCBrZXlib2FyZFNob3J0Y3V0c0RpdiA9IGVsKCdrZXlib2FyZFNob3J0Y3V0cycpOw0KICAgICAgICBwcm9ncmVzc0NpcmNsZS5zdHlsZS5zdHJva2VEYXNoYXJyYXkgPSBgJHtDSVJDTEVfQ0lSQ1VNRkVSRU5DRX0gJHtDSVJDTEVfQ0lSQ1VNRkVSRU5DRX1gOw0KICAgICAgICBwcm9ncmVzc0NpcmNsZUJnLnN0eWxlLnN0cm9rZURhc2hhcnJheSA9IGAke0NJUkNMRV9DSVJDVU1GRVJFTkNFfSAke0NJUkNMRV9DSVJDVU1GRVJFTkNFfWA7DQoNCiAgICAgICAgLy8gLS0tIFlvdVR1YmUgQVBJIC0tLQ0KICAgICAgICBmdW5jdGlvbiBvbllvdVR1YmVJZnJhbWVBUElSZWFkeSgpIHsNCiAgICAgICAgICAgIHlvdXR1YmVQbGF5ZXIgPSBuZXcgWVQuUGxheWVyKCd5b3V0dWJlUGxheWVyJywgew0KICAgICAgICAgICAgICAgIGhlaWdodDogJzM2MCcsDQogICAgICAgICAgICAgICAgd2lkdGg6ICc2NDAnLA0KICAgICAgICAgICAgICAgIHZpZGVvSWQ6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd5b3V0dWJlVmlkZW9JZCcpIHx8IGdldFZpZGVvSWQoREVGQVVMVF9ZT1VUVUJFX1VSTCksDQogICAgICAgICAgICAgICAgcGxheWVyVmFyczogeyAncGxheXNpbmxpbmUnOiAxIH0sDQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KICAgICAgICBjb25zdCB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsNCiAgICAgICAgdGFnLnNyYyA9ICJodHRwczovL3d3dy55b3V0dWJlLmNvbS9pZnJhbWVfYXBpIjsNCiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0YWcpOw0KDQogICAgICAgIGNvbnN0IGdldFZpZGVvSWQgPSAodXJsKSA9PiB7DQogICAgICAgICAgICBjb25zdCBtYXRjaCA9IHVybC5tYXRjaCgvKD86eW91dHVcLmJlXC98eW91dHViZVwuY29tXC8oPzplbWJlZFwvfHZcL3x3YXRjaFw/dj18IFNob3J0c1wvKSkoW2EtekEtWjAtOV8tXSspLyk7DQogICAgICAgICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6IG51bGw7DQogICAgICAgIH07DQoNCiAgICAgICAgLy8gLS0tIExvY2FsIFN0b3JhZ2UgLS0tDQogICAgICAgIGNvbnN0IGxvYWRTZXR0aW5ncyA9ICgpID0+IHsNCiAgICAgICAgICAgIGNvbnN0IHNldHRpbmdzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncG9tb2Rvcm9TZXR0aW5ncycpIHx8ICd7fScpOw0KICAgICAgICAgICAgdGltZXMgPSBzZXR0aW5ncy50aW1lcyB8fCB7IC4uLkRFRkFVTFRfVElNRVMgfTsNCiAgICAgICAgICAgIHRhc2tzID0gc2V0dGluZ3MudGFza3MgfHwgW107DQogICAgICAgICAgICBzdGF0aXN0aWNzID0gc2V0dGluZ3Muc3RhdGlzdGljcyB8fCB7IHRvdGFsUG9tb2Rvcm9zOiAwLCB0b3RhbEZvY3VzVGltZTogMCwgZGFpbHlTdHJlYWs6IDAsIGxhc3RDb21wbGV0ZWQ6IG51bGwgfTsNCiAgICAgICAgICAgIGF1dG9TdGFydEJyZWFrcyA9IHNldHRpbmdzLmF1dG9TdGFydEJyZWFrcyA/PyB0cnVlOw0KICAgICAgICAgICAgcG9tb2Rvcm9zQmVmb3JlTG9uZ0JyZWFrID0gc2V0dGluZ3MucG9tb2Rvcm9zQmVmb3JlTG9uZ0JyZWFrID8/IDQ7DQogICAgICAgICAgICBub3RpZmljYXRpb25Tb3VuZHMgPSBzZXR0aW5ncy5ub3RpZmljYXRpb25Tb3VuZHMgfHwgeyAuLi5ERUZBVUxUX1NPVU5EUyB9Ow0KICAgICAgICAgICAgbXV0ZVNvdW5kcyA9IHNldHRpbmdzLm11dGVTb3VuZHMgPz8gZmFsc2U7DQogICAgICAgICAgICBzZWxlY3RlZFRhc2tJbmRleCA9IHNldHRpbmdzLnNlbGVjdGVkVGFza0luZGV4ID8/IG51bGw7DQogICAgICAgICAgICBjb25zdCBiZyA9IHNldHRpbmdzLmJhY2tncm91bmQ7DQogICAgICAgICAgICBpZiAoYmcpIGRvY3VtZW50LmJvZHkuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybCgnJHtiZ30nKWA7DQogICAgICAgICAgICBlbCgncG9tb2Rvcm9UaW1lJykudmFsdWUgPSB0aW1lcy5wb21vZG9ybyAvIDYwOw0KICAgICAgICAgICAgZWwoJ3Nob3J0QnJlYWtUaW1lJykudmFsdWUgPSB0aW1lcy5zaG9ydEJyZWFrIC8gNjA7DQogICAgICAgICAgICBlbCgnbG9uZ0JyZWFrVGltZScpLnZhbHVlID0gdGltZXMubG9uZ0JyZWFrIC8gNjA7DQogICAgICAgICAgICBlbCgncG9tb2Rvcm9zQmVmb3JlTG9uZ0JyZWFrJykudmFsdWUgPSBwb21vZG9yb3NCZWZvcmVMb25nQnJlYWs7DQogICAgICAgICAgICBlbCgnYXV0b1N0YXJ0QnJlYWtzJykuY2hlY2tlZCA9IGF1dG9TdGFydEJyZWFrczsNCiAgICAgICAgICAgIGVsKCdwb21vZG9yb1NvdW5kJykudmFsdWUgPSBub3RpZmljYXRpb25Tb3VuZHMucG9tb2Rvcm87DQogICAgICAgICAgICBlbCgnc2hvcnRCcmVha1NvdW5kJykudmFsdWUgPSBub3RpZmljYXRpb25Tb3VuZHMuc2hvcnRCcmVhazsNCiAgICAgICAgICAgIGVsKCdsb25nQnJlYWtTb3VuZCcpLnZhbHVlID0gbm90aWZpY2F0aW9uU291bmRzLmxvbmdCcmVhazsNCiAgICAgICAgICAgIGVsKCdtdXRlU291bmRzJykuY2hlY2tlZCA9IG11dGVTb3VuZHM7DQogICAgICAgICAgICBlbCgneW91dHViZVVybCcpLnZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3lvdXR1YmVWaWRlb0lkJykgPyBgaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0ke2xvY2FsU3RvcmFnZS5nZXRJdGVtKCd5b3V0dWJlVmlkZW9JZCcpfWAgOiBERUZBVUxUX1lPVVRVQkVfVVJMOw0KICAgICAgICAgICAgdXBkYXRlVGFza0xpc3QoKTsNCiAgICAgICAgICAgIHVwZGF0ZVRhc2tTZWxlY3QoKTsNCiAgICAgICAgICAgIHVwZGF0ZVN0YXRpc3RpY3MoKTsNCiAgICAgICAgfTsNCiAgICAgICAgY29uc3Qgc2F2ZVNldHRpbmdzID0gKCkgPT4gew0KICAgICAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSB7DQogICAgICAgICAgICAgICAgdGltZXMsIHRhc2tzLCBzdGF0aXN0aWNzLCBhdXRvU3RhcnRCcmVha3MsIHBvbW9kb3Jvc0JlZm9yZUxvbmdCcmVhaywNCiAgICAgICAgICAgICAgICBub3RpZmljYXRpb25Tb3VuZHMsIG11dGVTb3VuZHMsIHNlbGVjdGVkVGFza0luZGV4LCBiYWNrZ3JvdW5kOiBkb2N1bWVudC5ib2R5LnN0eWxlLmJhY2tncm91bmRJbWFnZS5zbGljZSg1LCAtMikNCiAgICAgICAgICAgIH07DQogICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncG9tb2Rvcm9TZXR0aW5ncycsIEpTT04uc3RyaW5naWZ5KHNldHRpbmdzKSk7DQogICAgICAgIH07DQogICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNvbG9yKG1vZGUpIHsNCiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gY29sb3JzW21vZGVdOw0KICAgICAgICAgICAgcHJvZ3Jlc3NDaXJjbGUuc3R5bGUuc3Ryb2tlID0gY29sb3I7DQogICAgICAgICAgICBwcm9ncmVzc0NpcmNsZUJnLnN0eWxlLnN0cm9rZSA9IGNvbG9yOw0KICAgICAgICAgICAgcHJvZ3Jlc3NDaXJjbGVCZy5zdHlsZS5vcGFjaXR5ID0gJzAuMic7DQogICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29udHJvbHMgYnV0dG9uJykuZm9yRWFjaChidG4gPT4gew0KICAgICAgICAgICAgICAgIGJ0bi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgbW9kZUJ1dHRvbnMuZm9yRWFjaChidG4gPT4gew0KICAgICAgICAgICAgICAgIGJ0bi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gLS0tIFRpbWVyIEZ1bmN0aW9ucyAtLS0NCiAgICAgICAgY29uc3Qgc2V0UHJvZ3Jlc3MgPSBwZXJjZW50ID0+IHsNCiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IENJUkNMRV9DSVJDVU1GRVJFTkNFIC0gKHBlcmNlbnQgLyAxMDApICogQ0lSQ0xFX0NJUkNVTUZFUkVOQ0U7DQogICAgICAgICAgICBwcm9ncmVzc0NpcmNsZS5zdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gb2Zmc2V0Ow0KICAgICAgICB9Ow0KICAgICAgICBjb25zdCB1cGRhdGVEaXNwbGF5ID0gKCkgPT4gew0KICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVkVGltZSA9IGZvcm1hdFRpbWUoTWF0aC5tYXgoMCwgdGltZUxlZnQpKTsNCiAgICAgICAgICAgIHRpbWVEaXNwbGF5LnRleHRDb250ZW50ID0gZm9ybWF0dGVkVGltZTsNCiAgICAgICAgICAgIHNldFByb2dyZXNzKCh0aW1lc1tjdXJyZW50TW9kZV0gLSB0aW1lTGVmdCkgLyB0aW1lc1tjdXJyZW50TW9kZV0gKiAxMDApOw0KICAgICAgICAgICAgcG9tb0NvdW50ZXJEaXNwbGF5LnRleHRDb250ZW50ID0gc3RhdGlzdGljcy50b3RhbFBvbW9kb3JvcyA+IDAgPyBzdGF0aXN0aWNzLnRvdGFsUG9tb2Rvcm9zIDogJyc7DQogICAgICAgIH07DQogICAgICAgIGNvbnN0IHNldE1vZGUgPSAobW9kZSkgPT4gew0KICAgICAgICAgICAgbW9kZUJ1dHRvbnMuZm9yRWFjaChidG4gPT4gew0KICAgICAgICAgICAgICAgIGJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLiR7bW9kZX1gKS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTsNCiAgICAgICAgICAgIGN1cnJlbnRNb2RlID0gbW9kZTsNCiAgICAgICAgICAgIHRpbWVMZWZ0ID0gdGltZXNbbW9kZV07DQogICAgICAgICAgICB1cGRhdGVDb2xvcihtb2RlKTsNCiAgICAgICAgICAgIHJlc2V0VGltZXIoKTsNCiAgICAgICAgICAgIHVwZGF0ZURpc3BsYXkoKTsNCiAgICAgICAgfTsNCiAgICAgICAgIGNvbnN0IHN0YXJ0VGltZXIgPSAoKSA9PiB7DQogICAgICAgICAgICBpZiAodGltZXJJZCkgew0KICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXJJZCk7DQogICAgICAgICAgICAgICAgdGltZXJJZCA9IG51bGw7DQogICAgICAgICAgICAgICAgc3RhcnRCdG4uaW5uZXJIVE1MID0gJzxpIGNsYXNzPSJmYXMgZmEtcGxheSI+PC9pPiBTdGFydCc7DQogICAgICAgICAgICAgICAgeW91dHViZVBsYXllcj8ucGF1c2VWaWRlbygpOw0KDQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHN0YXJ0VGltZXN0YW1wID0gRGF0ZS5ub3coKSAtICgodGltZXNbY3VycmVudE1vZGVdIC0gdGltZUxlZnQpICogMTAwMCk7DQoNCiAgICAgICAgICAgICAgICB0aW1lcklkID0gc2V0SW50ZXJ2YWwoKCkgPT4gew0KICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGFwc2VkID0gTWF0aC5mbG9vcigoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZXN0YW1wKSAvIDEwMDApOw0KICAgICAgICAgICAgICAgICAgICB0aW1lTGVmdCA9IHRpbWVzW2N1cnJlbnRNb2RlXSAtIGVsYXBzZWQ7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVMZWZ0IDw9IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXJJZCk7DQogICAgICAgICAgICAgICAgICAgICAgICB0aW1lcklkID0gbnVsbDsNCiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZVRpbWVyRW5kKCk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudE1vZGUgPT09ICdwb21vZG9ybycpIHsNCg0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHVwZGF0ZURpc3BsYXkoKTsNCiAgICAgICAgICAgICAgICB9LCAxMDAwKTsNCg0KICAgICAgICAgICAgICAgIHN0YXJ0QnRuLmlubmVySFRNTCA9ICc8aSBjbGFzcz0iZmFzIGZhLXBhdXNlIj48L2k+IFBhdXNlJzsNCiAgICAgICAgICAgICAgICB5b3V0dWJlUGxheWVyPy5wbGF5VmlkZW8oKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfTsNCiAgICAgICAgY29uc3QgcmVzZXRUaW1lciA9ICgpID0+IHsNCiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXJJZCk7DQogICAgICAgICAgICB0aW1lcklkID0gbnVsbDsNCiAgICAgICAgICAgIHRpbWVMZWZ0ID0gdGltZXNbY3VycmVudE1vZGVdOw0KICAgICAgICAgICAgdXBkYXRlRGlzcGxheSgpOw0KICAgICAgICAgICAgc3RhcnRCdG4uaW5uZXJIVE1MID0gJzxpIGNsYXNzPSJmYXMgZmEtcGxheSI+PC9pPiBTdGFydCc7DQogICAgICAgICAgICB5b3V0dWJlUGxheWVyPy5wYXVzZVZpZGVvKCk7DQoNCiAgICAgICAgfTsNCiAgICAgICAgY29uc3QgaGFuZGxlVGltZXJFbmQgPSAoKSA9PiB7DQogICAgICAgICAgICBsZXQgbmV4dE1vZGU7DQogICAgICAgICAgICBpZiAoY3VycmVudE1vZGUgPT09ICdwb21vZG9ybycpIHsNCiAgICAgICAgICAgICAgICBzdGF0aXN0aWNzLnRvdGFsUG9tb2Rvcm9zKys7DQogICAgICAgICAgICAgICAgIHN0YXRpc3RpY3MudG90YWxGb2N1c1RpbWUgKz0gdGltZXMucG9tb2Rvcm87IC8vIEFkZCB0aGUgdGltZSBzcGVudA0KICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZFRhc2tJbmRleCAhPT0gbnVsbCkgdGFza3Nbc2VsZWN0ZWRUYXNrSW5kZXhdLnBvbW9kb3JvcysrOw0KICAgICAgICAgICAgICAgIHVwZGF0ZVN0YXRpc3RpY3MoKTsNCiAgICAgICAgICAgICAgICBwbGF5Tm90aWZpY2F0aW9uU291bmQoJ3BvbW9kb3JvJyk7DQogICAgICAgICAgICAgICAgc2hvd05vdGlmaWNhdGlvbignUG9tb2Rvcm8gQ29tcGxldGUhJyk7DQogICAgICAgICAgICAgICAgcG9tb2Rvcm9Db3VudCsrOw0KICAgICAgICAgICAgICAgIG5leHRNb2RlID0gKHN0YXRpc3RpY3MudG90YWxQb21vZG9yb3MgJSBwb21vZG9yb3NCZWZvcmVMb25nQnJlYWsgPT09IDApID8gJ2xvbmdCcmVhaycgOiAnc2hvcnRCcmVhayc7DQogICAgICAgICAgICAgICAgaWYgKG5leHRNb2RlID09PSAnbG9uZ0JyZWFrJykgcG9tb2Rvcm9Db3VudCA9IDA7DQoNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgcGxheU5vdGlmaWNhdGlvblNvdW5kKGN1cnJlbnRNb2RlKTsNCiAgICAgICAgICAgICAgICBzaG93Tm90aWZpY2F0aW9uKCdCcmVhayBDb21wbGV0ZSEnKTsNCiAgICAgICAgICAgICAgICBuZXh0TW9kZSA9ICdwb21vZG9ybyc7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAvLyBBdHVhbGl6YSBvIG1vZG8gdmlzdWFsbWVudGUNCiAgICAgICAgICAgIG1vZGVCdXR0b25zLmZvckVhY2goYnRuID0+IHsNCiAgICAgICAgICAgICAgICBidG4uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC4ke25leHRNb2RlfWApLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpOw0KICAgICAgICAgICAgY3VycmVudE1vZGUgPSBuZXh0TW9kZTsNCg0KICAgICAgICAgICAgLy8gQXR1YWxpemEgYSBjb3IgZG8gdGltZXINCiAgICAgICAgICAgIHVwZGF0ZUNvbG9yKGN1cnJlbnRNb2RlKTsNCg0KICAgICAgICAgICAgLy8gRGVmaW5lIG8gbm92byB0ZW1wbyBlIGF0dWFsaXphIG8gZGlzcGxheQ0KICAgICAgICAgICAgdGltZUxlZnQgPSB0aW1lc1tjdXJyZW50TW9kZV07DQogICAgICAgICAgICB1cGRhdGVEaXNwbGF5KCk7DQoNCiAgICAgICAgICAgIGlmIChhdXRvU3RhcnRCcmVha3MpIHsNCiAgICAgICAgICAgICAgICBzdGFydFRpbWVyKCk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHN0YXJ0QnRuLmlubmVySFRNTCA9ICc8aSBjbGFzcz0iZmFzIGZhLXBsYXkiPjwvaT4gU3RhcnQnOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICB1cGRhdGVUYXNrTGlzdCgpOw0KICAgICAgICAgICAgc2F2ZVNldHRpbmdzKCk7DQogICAgICAgIH07DQoNCg0KICAgICAgICAvLyAtLS0gVGFzayBNYW5hZ2VtZW50IC0tLQ0KICAgICAgICBjb25zdCBoYW5kbGVUYXNrSW5wdXQgPSAoZXZlbnQpID0+IHsgaWYgKGV2ZW50LmtleSA9PT0gJ0VudGVyJykgYWRkVGFzaygpOyB9Ow0KICAgICAgICBjb25zdCBhZGRUYXNrID0gKCkgPT4gew0KICAgICAgICAgICAgY29uc3QgdGFza0lucHV0ID0gZWwoJ3Rhc2tJbnB1dCcpOw0KICAgICAgICAgICAgY29uc3QgdGFza1RleHQgPSB0YXNrSW5wdXQudmFsdWUudHJpbSgpOw0KICAgICAgICAgICAgaWYgKHRhc2tUZXh0KSB7DQogICAgICAgICAgICAgICAgdGFza3MucHVzaCh7IHRleHQ6IGVzY2FwZUh0bWwodGFza1RleHQpLCBjb21wbGV0ZWQ6IGZhbHNlLCBwb21vZG9yb3M6IDAgfSk7DQogICAgICAgICAgICAgICAgdGFza0lucHV0LnZhbHVlID0gJyc7DQogICAgICAgICAgICAgICAgdXBkYXRlVGFza0xpc3QoKTsNCiAgICAgICAgICAgICAgICB1cGRhdGVUYXNrU2VsZWN0KCk7DQogICAgICAgICAgICAgICAgc2F2ZVNldHRpbmdzKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH07DQogICAgICAgIGNvbnN0IHJlbW92ZVRhc2sgPSAoaW5kZXgpID0+IHsNCiAgICAgICAgICAgIHRhc2tzLnNwbGljZShpbmRleCwgMSk7DQogICAgICAgICAgICBpZiAoc2VsZWN0ZWRUYXNrSW5kZXggPj0gdGFza3MubGVuZ3RoKSBzZWxlY3RlZFRhc2tJbmRleCA9IG51bGw7DQogICAgICAgICAgICB1cGRhdGVUYXNrTGlzdCgpOw0KICAgICAgICAgICAgdXBkYXRlVGFza1NlbGVjdCgpOw0KICAgICAgICAgICAgc2F2ZVNldHRpbmdzKCk7DQogICAgICAgIH07DQogICAgICAgIGNvbnN0IHRvZ2dsZVRhc2sgPSAoaW5kZXgpID0+IHsNCiAgICAgICAgICAgIHRhc2tzW2luZGV4XS5jb21wbGV0ZWQgPSAhdGFza3NbaW5kZXhdLmNvbXBsZXRlZDsNCiAgICAgICAgICAgIHVwZGF0ZVRhc2tMaXN0KCk7DQogICAgICAgICAgICBzYXZlU2V0dGluZ3MoKTsNCiAgICAgICAgfTsNCiAgICAgICAgY29uc3QgdXBkYXRlVGFza0xpc3QgPSAoKSA9PiB7DQogICAgICAgICAgICBjb25zdCB0YXNrTGlzdERpdiA9IGVsKCd0YXNrTGlzdCcpOw0KICAgICAgICAgICAgdGFza0xpc3REaXYuaW5uZXJIVE1MID0gJyc7DQogICAgICAgICAgICB0YXNrcy5mb3JFYWNoKCh0YXNrLCBpbmRleCkgPT4gew0KICAgICAgICAgICAgICAgIHRhc2tMaXN0RGl2LmlubmVySFRNTCArPSBgDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhc2staXRlbSAke3Rhc2suY29tcGxldGVkID8gJ2NvbXBsZXRlZCcgOiAnJ30iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiAke3Rhc2suY29tcGxldGVkID8gJ2NoZWNrZWQnIDogJyd9IG9uY2xpY2s9InRvZ2dsZVRhc2soJHtpbmRleH0pIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPiR7dGFzay50ZXh0fTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwb21vZG9yby1jb3VudCI+UG9tb2Rvcm9zOiAke3Rhc2sucG9tb2Rvcm9zfTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhc2stYWN0aW9ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icG9tb2Rvcm8iIG9uY2xpY2s9InJlbW92ZVRhc2soJHtpbmRleH0pIj48aSBjbGFzcz0iZmFzIGZhLXRyYXNoIj48L2k+PC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+YDsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9Ow0KICAgICAgICBjb25zdCB1cGRhdGVUYXNrU2VsZWN0ID0gKCkgPT4gew0KICAgICAgICAgICAgY29uc3QgdGFza1NlbGVjdCA9IGVsKCd0YXNrU2VsZWN0Jyk7DQogICAgICAgICAgICB0YXNrU2VsZWN0LmlubmVySFRNTCA9ICc8b3B0aW9uIHZhbHVlPSIiPlNlbGVjdCBhIHRhc2s8L29wdGlvbj4nOw0KICAgICAgICAgICAgdGFza3MuZm9yRWFjaCgodGFzaywgaW5kZXgpID0+IHsNCiAgICAgICAgICAgICAgICB0YXNrU2VsZWN0LmlubmVySFRNTCArPSBgPG9wdGlvbiB2YWx1ZT0iJHtpbmRleH0iPiR7dGFzay50ZXh0fTwvb3B0aW9uPmA7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIHRhc2tTZWxlY3QudmFsdWUgPSBzZWxlY3RlZFRhc2tJbmRleCA9PT0gbnVsbCA/ICcnIDogc2VsZWN0ZWRUYXNrSW5kZXg7DQogICAgICAgIH07DQoNCiAgICAgICAgZWwoJ3Rhc2tTZWxlY3QnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICBzZWxlY3RlZFRhc2tJbmRleCA9IHRoaXMudmFsdWUgPT09ICcnID8gbnVsbCA6IHBhcnNlSW50KHRoaXMudmFsdWUpOw0KICAgICAgICAgICAgc2F2ZVNldHRpbmdzKCk7DQogICAgICAgIH0pOw0KDQogICAgICAgIC8vIC0tLSBTZXR0aW5ncyBQYW5lbCAtLS0NCiAgICAgICAgY29uc3QgdG9nZ2xlU2V0dGluZ3MgPSAoKSA9PiB7DQogICAgICAgICAgICBjb25zdCBzZXR0aW5nc1BhbmVsID0gZWwoJ3NldHRpbmdzUGFuZWwnKTsNCiAgICAgICAgICAgIHNldHRpbmdzUGFuZWwuc3R5bGUuZGlzcGxheSA9IHNldHRpbmdzUGFuZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJ2Jsb2NrJyA6ICdub25lJzsNCiAgICAgICAgICAgIGlmIChzZXR0aW5nc1BhbmVsLnN0eWxlLmRpc3BsYXkgPT09ICdibG9jaycpIHNldHRpbmdzUGFuZWwuc2Nyb2xsSW50b1ZpZXcoeyBiZWhhdmlvcjogJ3Ntb290aCcgfSk7DQogICAgICAgIH07DQogICAgICAgIGNvbnN0IHVwZGF0ZVRpbWVGcm9tSW5wdXQgPSAoaWQsIHZhbHVlKSA9PiB7DQogICAgICAgICAgICBjb25zdCBtb2RlID0gaWQucmVwbGFjZSgnVGltZScsICcnKTsNCiAgICAgICAgICAgIHRpbWVzW21vZGVdID0gcGFyc2VJbnQodmFsdWUsIDEwKSAqIDYwOw0KICAgICAgICAgICAgaWYgKGN1cnJlbnRNb2RlID09PSBtb2RlKSB7DQogICAgICAgICAgICAgICAgdGltZUxlZnQgPSB0aW1lc1tjdXJyZW50TW9kZV07DQogICAgICAgICAgICAgICAgdXBkYXRlRGlzcGxheSgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgc2F2ZVNldHRpbmdzKCk7DQogICAgICAgIH07DQogICAgICAgIGNvbnN0IHVwZGF0ZUJhY2tncm91bmQgPSAodHlwZSkgPT4gew0KICAgICAgICAgICAgaWYgKHR5cGUgPT09ICd1cmwnKSB7DQogICAgICAgICAgICAgICAgY29uc3QgdXJsID0gZWwoJ2JnVXJsJykudmFsdWUudHJpbSgpOw0KICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gdXJsID8gYHVybCgnJHt1cmx9JylgIDogJyc7DQogICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdmaWxlJykgew0KICAgICAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBlbCgnYmdGaWxlJykuZmlsZXNbMF07DQogICAgICAgICAgICAgICAgaWYgKGZpbGUpIHsNCiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsNCiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZGVuZCA9ICgpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybCgnJHtyZWFkZXIucmVzdWx0fScpYDsNCiAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVTZXR0aW5ncygpOw0KICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBzYXZlU2V0dGluZ3MoKTsNCiAgICAgICAgfTsNCiAgICAgICAgY29uc3QgcmVtb3ZlQmFja2dyb3VuZCA9ICgpID0+IHsNCiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gJyc7DQogICAgICAgICAgICBlbCgnYmdVcmwnKS52YWx1ZSA9ICcnOw0KICAgICAgICAgICAgZWwoJ2JnRmlsZScpLnZhbHVlID0gJyc7DQogICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYmFja2dyb3VuZEltYWdlJywgJycpOw0KICAgICAgICAgICAgc2F2ZVNldHRpbmdzKCk7DQogICAgICAgIH07DQogICAgICAgIGNvbnN0IHVwZGF0ZVlvdVR1YmVWaWRlbyA9ICgpID0+IHsNCiAgICAgICAgICAgIGNvbnN0IHVybCA9IGVsKCd5b3V0dWJlVXJsJykudmFsdWU7DQogICAgICAgICAgICBjb25zdCB2aWRlb0lkID0gZ2V0VmlkZW9JZCh1cmwpOw0KICAgICAgICAgICAgaWYgKHZpZGVvSWQgJiYgeW91dHViZVBsYXllciAmJiB5b3V0dWJlUGxheWVyLmxvYWRWaWRlb0J5SWQpIHsNCiAgICAgICAgICAgICAgICB5b3V0dWJlUGxheWVyLmxvYWRWaWRlb0J5SWQodmlkZW9JZCk7DQogICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3lvdXR1YmVWaWRlb0lkJywgdmlkZW9JZCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBzYXZlU2V0dGluZ3MoKTsNCiAgICAgICAgfTsNCiAgICAgICAgY29uc3QgcmVzZXRBbGxTZXR0aW5ncyA9ICgpID0+IHsNCiAgICAgICAgICAgIHRpbWVzID0geyAuLi5ERUZBVUxUX1RJTUVTIH07DQogICAgICAgICAgICBub3RpZmljYXRpb25Tb3VuZHMgPSB7IC4uLkRFRkFVTFRfU09VTkRTIH07DQogICAgICAgICAgICBhdXRvU3RhcnRCcmVha3MgPSB0cnVlOw0KICAgICAgICAgICAgcG9tb2Rvcm9zQmVmb3JlTG9uZ0JyZWFrID0gNDsNCiAgICAgICAgICAgIHN0YXRpc3RpY3MgPSB7IHRvdGFsUG9tb2Rvcm9zOiAwLCB0b3RhbEZvY3VzVGltZTogMCwgZGFpbHlTdHJlYWs6IDAsIGxhc3RDb21wbGV0ZWQ6IG51bGwgfTsNCiAgICAgICAgICAgIHRhc2tzID0gW107DQogICAgICAgICAgICBzZWxlY3RlZFRhc2tJbmRleCA9IG51bGw7DQogICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmJhY2tncm91bmRJbWFnZSA9ICcnOw0KICAgICAgICAgICAgZWwoJ3BvbW9kb3JvVGltZScpLnZhbHVlID0gdGltZXMucG9tb2Rvcm8gLyA2MDsNCiAgICAgICAgICAgIGVsKCdzaG9ydEJyZWFrVGltZScpLnZhbHVlID0gdGltZXMuc2hvcnRCcmVhayAvIDYwOw0KICAgICAgICAgICAgZWwoJ2xvbmdCcmVha1RpbWUnKS52YWx1ZSA9IHRpbWVzLmxvbmdCcmVhayAvIDYwOw0KICAgICAgICAgICAgZWwoJ3BvbW9kb3Jvc0JlZm9yZUxvbmdCcmVhaycpLnZhbHVlID0gcG9tb2Rvcm9zQmVmb3JlTG9uZ0JyZWFrOw0KICAgICAgICAgICAgZWwoJ2F1dG9TdGFydEJyZWFrcycpLmNoZWNrZWQgPSBhdXRvU3RhcnRCcmVha3M7DQogICAgICAgICAgICBlbCgncG9tb2Rvcm9Tb3VuZCcpLnZhbHVlID0gbm90aWZpY2F0aW9uU291bmRzLnBvbW9kb3JvOw0KICAgICAgICAgICAgZWwoJ3Nob3J0QnJlYWtTb3VuZCcpLnZhbHVlID0gbm90aWZpY2F0aW9uU291bmRzLnNob3J0QnJlYWs7DQogICAgICAgICAgICBlbCgnbG9uZ0JyZWFrU291bmQnKS52YWx1ZSA9IG5vdGlmaWNhdGlvblNvdW5kcy5sb25nQnJlYWs7DQogICAgICAgICAgICBlbCgnbXV0ZVNvdW5kcycpLmNoZWNrZWQgPSBtdXRlU291bmRzOw0KICAgICAgICAgICAgZWwoJ2JnVXJsJykudmFsdWUgPSAnJzsNCiAgICAgICAgICAgIGVsKCdiZ0ZpbGUnKS52YWx1ZSA9ICcnOw0KICAgICAgICAgICAgZWwoJ3lvdXR1YmVVcmwnKS52YWx1ZSA9IERFRkFVTFRfWU9VVFVCRV9VUkw7DQogICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgneW91dHViZVZpZGVvSWQnKTsNCiAgICAgICAgICAgIHJlc2V0VGltZXIoKTsNCiAgICAgICAgICAgIHVwZGF0ZVRhc2tMaXN0KCk7DQogICAgICAgICAgICB1cGRhdGVUYXNrU2VsZWN0KCk7DQogICAgICAgICAgICB1cGRhdGVTdGF0aXN0aWNzKCk7DQogICAgICAgICAgICBzYXZlU2V0dGluZ3MoKTsNCiAgICAgICAgfTsNCg0KICAgICAgICAvLyAtLS0gU3RhdGlzdGljcyAtLS0NCiAgICAgICAgY29uc3QgdXBkYXRlU3RhdGlzdGljcyA9ICgpID0+IHsNCiAgICAgICAgICAgIGVsKCd0b3RhbFBvbW9kb3Jvc1N0YXQnKS50ZXh0Q29udGVudCA9IHN0YXRpc3RpY3MudG90YWxQb21vZG9yb3M7DQogICAgICAgICAgICBlbCgndG90YWxUaW1lJykudGV4dENvbnRlbnQgPSBmb3JtYXRUaW1lKHN0YXRpc3RpY3MudG90YWxGb2N1c1RpbWUpOw0KICAgICAgICAgICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpLnRvRGF0ZVN0cmluZygpOw0KICAgICAgICAgICAgY29uc3QgbGFzdENvbXBsZXRlZCA9IHN0YXRpc3RpY3MubGFzdENvbXBsZXRlZCA/IG5ldyBEYXRlKHN0YXRpc3RpY3MubGFzdENvbXBsZXRlZCkudG9EYXRlU3RyaW5nKCkgOiBudWxsOw0KICAgICAgICAgICAgaWYgKGxhc3RDb21wbGV0ZWQgPT09IHRvZGF5KSB7DQogICAgICAgICAgICAgICAgc3RhdGlzdGljcy5kYWlseVN0cmVhaysrOw0KICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0Q29tcGxldGVkICE9PSBudWxsICYmIGxhc3RDb21wbGV0ZWQgIT09IHRvZGF5KSB7DQogICAgICAgICAgICAgICAgc3RhdGlzdGljcy5kYWlseVN0cmVhayA9IDE7DQogICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRpc3RpY3MudG90YWxQb21vZG9yb3MgPiAwICYmIGxhc3RDb21wbGV0ZWQgPT09IG51bGwpIHsNCiAgICAgICAgICAgICAgICBzdGF0aXN0aWNzLmRhaWx5U3RyZWFrID0gMTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHN0YXRpc3RpY3MubGFzdENvbXBsZXRlZCA9IG5ldyBEYXRlKCk7DQogICAgICAgICAgICBzYXZlU2V0dGluZ3MoKTsNCiAgICAgICAgfTsNCg0KICAgICAgICAvLyBOb3ZvIEV2ZW50IExpc3RlbmVyIHBhcmEgdmlzaWJpbGlkYWRlIGRhIHDDoWdpbmENCiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsICgpID0+IHsNCiAgICAgICAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICd2aXNpYmxlJyAmJiB0aW1lcklkKSB7DQogICAgICAgICAgICAgICAgLy8gUmVjYWxjdWxhIG8gdGVtcG8gcmVzdGFudGUgYmFzZWFkbyBubyB0aW1lc3RhbXAgaW5pY2lhbA0KICAgICAgICAgICAgICAgIGNvbnN0IGVsYXBzZWQgPSBNYXRoLmZsb29yKChEYXRlLm5vdygpIC0gc3RhcnRUaW1lc3RhbXApIC8gMTAwMCk7DQogICAgICAgICAgICAgICAgdGltZUxlZnQgPSBNYXRoLm1heCgwLCB0aW1lc1tjdXJyZW50TW9kZV0gLSBlbGFwc2VkKTsNCiAgICAgICAgICAgICAgICB1cGRhdGVEaXNwbGF5KCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KDQoNCiAgICAgICBjb25zdCBwbGF5Tm90aWZpY2F0aW9uU291bmQgPSAobW9kZSkgPT4gew0KICAgICAgICAgICAgaWYgKCFtdXRlU291bmRzKSB7DQogICAgICAgICAgICAgICAgc3dpdGNoIChub3RpZmljYXRpb25Tb3VuZHNbbW9kZV0pIHsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmVsbCc6DQogICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVCZWVwKDEwMDAsIDIwMDApOyAgLy8gRnJlcXXDqm5jaWEgZGUgMTAwMCBIeiBwYXJhIHVtIHRvbSBnZXJhbCBlIGNsYXJvDQogICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGNyZWF0ZUJlZXAoMTAwMCwgMjAwMCksIDIwMDApOyAvLyBTZWd1bmRvIGJlZXANCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY2hpbWUnOg0KICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlQmVlcCg2MDAsIDIwMDApOyAvLyBGcmVxdcOqbmNpYSA2MDBoeiBwYXJhIHVtIHNvbSB1bSBwb3VjbyBtYWlzIHN1YXZlDQogICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGNyZWF0ZUJlZXAoODAwLCAyMDAwKSwgMjAwMCk7IC8vIFNlZ3VuZG8gYmVlcCwgc3ViaW5kbyB1bSBwb3VjbyBwYXJhIGNoYW1hciBhdGVuw6fDo28NCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICBjYXNlICdkaW5nJzoNCiAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVCZWVwKDQwMCwgMjAwMCk7ICAgLy8gRnJlcXXDqm5jaWEgNDAwIEh6IHBhcmEgdW0gdG9tIGdyYXZlIGUgbWFpcyBzdXRpbA0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KDQogICAgICAgIC8vIC0tLSBFdmVudCBMaXN0ZW5lcnMgLS0tDQogICAgICAgIGVsKCdwb21vZG9yb1RpbWUnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4gdXBkYXRlVGltZUZyb21JbnB1dCgncG9tb2Rvcm9UaW1lJywgZS50YXJnZXQudmFsdWUpKTsNCiAgICAgICAgZWwoJ3Nob3J0QnJlYWtUaW1lJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHVwZGF0ZVRpbWVGcm9tSW5wdXQoJ3Nob3J0QnJlYWtUaW1lJywgZS50YXJnZXQudmFsdWUpKTsNCiAgICAgICAgZWwoJ2xvbmdCcmVha1RpbWUnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4gdXBkYXRlVGltZUZyb21JbnB1dCgnbG9uZ0JyZWFrVGltZScsIGUudGFyZ2V0LnZhbHVlKSk7DQogICAgICAgIGVsKCdwb21vZG9yb3NCZWZvcmVMb25nQnJlYWsnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4gew0KICAgICAgICAgICAgcG9tb2Rvcm9zQmVmb3JlTG9uZ0JyZWFrID0gcGFyc2VJbnQoZS50YXJnZXQudmFsdWUsIDEwKTsNCiAgICAgICAgICAgIHNhdmVTZXR0aW5ncygpOw0KICAgICAgICB9KTsNCiAgICAgICAgZWwoJ2F1dG9TdGFydEJyZWFrcycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7DQogICAgICAgICAgICBhdXRvU3RhcnRCcmVha3MgPSBlLnRhcmdldC5jaGVja2VkOw0KICAgICAgICAgICAgc2F2ZVNldHRpbmdzKCk7DQogICAgICAgIH0pOw0KICAgICAgICBlbCgncG9tb2Rvcm9Tb3VuZCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7DQogICAgICAgICAgICBub3RpZmljYXRpb25Tb3VuZHMucG9tb2Rvcm8gPSBlLnRhcmdldC52YWx1ZTsNCiAgICAgICAgICAgIHNhdmVTZXR0aW5ncygpOw0KICAgICAgICB9KTsNCiAgICAgICAgZWwoJ3Nob3J0QnJlYWtTb3VuZCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7DQogICAgICAgICAgICBub3RpZmljYXRpb25Tb3VuZHMuc2hvcnRCcmVhayA9IGUudGFyZ2V0LnZhbHVlOw0KICAgICAgICAgICAgc2F2ZVNldHRpbmdzKCk7DQogICAgICAgIH0pOw0KICAgICAgICBlbCgnbG9uZ0JyZWFrU291bmQnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4gew0KICAgICAgICAgICAgbm90aWZpY2F0aW9uU291bmRzLmxvbmdCcmVhayA9IGUudGFyZ2V0LnZhbHVlOw0KICAgICAgICAgICAgc2F2ZVNldHRpbmdzKCk7DQogICAgICAgIH0pOw0KICAgICAgICBlbCgnbXV0ZVNvdW5kcycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7DQogICAgICAgICAgICBtdXRlU291bmRzID0gZS50YXJnZXQuY2hlY2tlZDsNCiAgICAgICAgICAgIHNhdmVTZXR0aW5ncygpOw0KICAgICAgICB9KTsNCiAgICAgICAgZWwoJ3lvdXR1YmVVcmwnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB1cGRhdGVZb3VUdWJlVmlkZW8pOw0KDQogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZXZlbnQpID0+IHsNCiAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQudGFnTmFtZSAhPT0gJ0lOUFVUJyAmJiBldmVudC50YXJnZXQudGFnTmFtZSAhPT0gJ1NFTEVDVCcgJiYgZXZlbnQudGFyZ2V0LnRhZ05hbWUgIT09ICdURVhUQVJFQScpIHsNCiAgICAgICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LmNvZGUpIHsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAnU3BhY2UnOg0KICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRUaW1lcigpOw0KICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gUHJldmVudCBwYWdlIHNjcm9sbGluZw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgJ0tleVInOg0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRUaW1lcigpOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgJ0RpZ2l0MSc6DQogICAgICAgICAgICAgICAgICAgICAgICBzZXRNb2RlKCdwb21vZG9ybycpOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgJ0RpZ2l0Mic6DQogICAgICAgICAgICAgICAgICAgICAgICBzZXRNb2RlKCdzaG9ydEJyZWFrJyk7DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAnRGlnaXQzJzoNCiAgICAgICAgICAgICAgICAgICAgICAgIHNldE1vZGUoJ2xvbmdCcmVhaycpOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCg0KICAgICAgICAvLyAtLS0gVGhlbWUgVG9nZ2xlIC0tLQ0KICAgICAgICBjb25zdCB0b2dnbGVUaGVtZSA9ICgpID0+IHsNCiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnRvZ2dsZSgnZGFyay1tb2RlJyk7DQogICAgICAgICAgICBjb25zdCBpY29uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRoZW1lLXRvZ2dsZSBpJyk7DQogICAgICAgICAgICBpY29uLmNsYXNzTGlzdC50b2dnbGUoJ2ZhLW1vb24nKTsNCiAgICAgICAgICAgIGljb24uY2xhc3NMaXN0LnRvZ2dsZSgnZmEtc3VuJyk7DQogICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGhlbWUnLCBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5jb250YWlucygnZGFyay1tb2RlJykgPyAnZGFyaycgOiAnbGlnaHQnKTsNCiAgICAgICAgfTsNCg0KICAgICAgICAvLyAtLS0gS2V5Ym9hcmQgU2hvcnRjdXRzIFRvZ2dsZSAtLS0NCiAgICAgICAgY29uc3QgdG9nZ2xlS2V5Ym9hcmRTaG9ydGN1dHMgPSAoKSA9PiB7DQogICAgICAgICAgICBrZXlib2FyZFNob3J0Y3V0c0Rpdi5jbGFzc0xpc3QudG9nZ2xlKCdoaWRlJyk7DQogICAgICAgIH07DQoNCiAgICAgICAgLy8gLS0tIEluaXRpYWxpemF0aW9uIC0tLQ0KICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4gew0KICAgICAgICAgICAgbG9hZFNldHRpbmdzKCk7DQogICAgICAgICAgICB1cGRhdGVDb2xvcihjdXJyZW50TW9kZSk7DQogICAgICAgICAgICBzZXRNb2RlKCdwb21vZG9ybycpOw0KICAgICAgICAgICAgdXBkYXRlRGlzcGxheSgpOw0KICAgICAgICAgICAgY29uc3Qgc2F2ZWRUaGVtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0aGVtZScpOw0KICAgICAgICAgICAgaWYgKHNhdmVkVGhlbWUgPT09ICdkYXJrJykgew0KICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnZGFyay1tb2RlJyk7DQogICAgICAgICAgICAgICAgY29uc3QgaWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aGVtZS10b2dnbGUgaScpOw0KICAgICAgICAgICAgICAgIGljb24uY2xhc3NMaXN0LnJlbW92ZSgnZmEtbW9vbicpOw0KICAgICAgICAgICAgICAgIGljb24uY2xhc3NMaXN0LmFkZCgnZmEtc3VuJyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAgIC8vIFNvbGljaXRhciBwZXJtaXNzw6NvIHBhcmEgbm90aWZpY2HDp8O1ZXMNCiAgICAgICAgICAgIGlmICgnTm90aWZpY2F0aW9uJyBpbiB3aW5kb3cpIHsNCiAgICAgICAgICAgICAgICBOb3RpZmljYXRpb24ucmVxdWVzdFBlcm1pc3Npb24oKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzdG9yYWdlJywgKGV2ZW50KSA9PiB7DQogICAgICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAncG9tb2Rvcm9TZXR0aW5ncycpIGxvYWRTZXR0aW5ncygpOw0KICAgICAgICB9KTsNCiAgICA8L3NjcmlwdD4NCjwvYm9keT4NCg0KPC9odG1sPg=="

// Função para decodificar base64
function decodeBase64(str) {
    return decodeURIComponent(Array.prototype.map.call(atob(str), function(c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));
}

// Decodifica o conteúdo
const pomodoroAppHTML = decodeBase64(pomodoroAppBase64);




    // Inicializa a visualização com o conteúdo da aplicação
     liveFrame.srcdoc = pomodoroAppHTML;


</script>