---
layout: default
---

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

<style>
    html, body {
        max-width: none;
        margin: 0;
        padding: 0;
        height: 100%;
        overflow-x: hidden;
        overflow-y: auto;
        overscroll-behavior: none
    }
    
     #liveFrame {
        display: block;
        width: 100vw;
        height: 100vh;
        border: none;
		overflow: hidden;
		position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 1000;
    }
	 .container, .wrapper{
		margin: 0 !important;
		padding: 0 !important;
		max-width: none !important;
		width: 100% !important;
	 }

</style>
</head>

 <iframe id="liveFrame"></iframe>

<script>
    const liveFrame = document.getElementById('liveFrame');

    // HTML da aplicação em Base64
    const pomodoroAppBase64 = "";

    // Função para decodificar base64
    function decodeBase64(str) {
        try {
             return decodeURIComponent(atob(str).split('').map(function(c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
        } catch (e) {
            console.error("Erro ao decodificar Base64:", e);
             return "";
        }
       
    }

    // Decodifica o conteúdo
    const pomodoroAppHTML = decodeBase64(pomodoroAppBase64);

    // Inicializa a visualização com o conteúdo da aplicação
     liveFrame.srcdoc = pomodoroAppHTML;
       function toggleTheme() {
            const body = document.body;
            const currentTheme = body.getAttribute('data-theme') || 'light';
            const newTheme = currentTheme === 'light' ? 'dark' : 'light';
            body.setAttribute('data-theme', newTheme);
              localStorage.setItem('theme', newTheme)
              if (liveFrame && liveFrame.contentWindow) {
                 liveFrame.contentWindow.postMessage({ type: 'themeChange', theme: newTheme }, '*');
            }
        }
        
           // Inicializa o tema salvo no local storage
        document.addEventListener('DOMContentLoaded', () => {
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme) {
                document.body.setAttribute('data-theme', savedTheme);
            }
          });


</script>
