---
layout: default
---

<style>
    html, body {
        max-width: none; /* Remove o limite de largura 100%*/
        margin: 0; /* Remove margens padrão */
        padding: 0; /* Remove preenchimento padrão */
         height: 100%; /* Garante que html e body tenham 100% de altura */
    }
    .full-width {
        max-width: none !important; /* Ignora a largura máxima */
    }
    .editor-preview {
        display: flex;
        flex-direction: row;
       height: 100vh; /* Ajusta a altura para ocupar toda a viewport */
        width: 100%; /* Garante que a área de edição use 100% da largura */
    }
    
    #livePreview {
        width: 100%; /* Mantém a divisão em 100% para a visualização */
        padding: 0px; /* Removo o padding */
        overflow-y: auto;
        /*background-color: #828282; /* Fundo escuro para a visualização */
        /*color: #fff;  Texto branco para o modo escuro */
          height: 100%; /* Define 100% de altura */
    }
    iframe {
        width: 100%;
        height: 100%;
        border: none;
    }
    .container {
        max-width: none;
    }
    body {
        max-width: 100%;
    }

</style>
<div class="editor-preview">
    <div id="livePreview">
        <iframe id="liveFrame"></iframe>
    </div>
</div>

<script>
    const liveFrame = document.getElementById('liveFrame');

    // HTML da sua aplicação Pomodoro em Base64 (A SER ADICIONADO)
    const pomodoroAppBase64 = "";

    // Função para decodificar base64
    function decodeBase64(str) {
        try {
             return decodeURIComponent(atob(str).split('').map(function(c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
        } catch (e) {
            console.error("Erro ao decodificar Base64:", e);
             return "";
        }
       
    }

    // Decodifica o conteúdo
    const pomodoroAppHTML = decodeBase64(pomodoroAppBase64);

    // Inicializa a visualização com o conteúdo da aplicação
     liveFrame.srcdoc = pomodoroAppHTML;

</script>